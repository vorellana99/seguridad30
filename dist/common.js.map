{"version":3,"sources":["webpack:///./src/app/shared/services/accion-permiso.service.ts","webpack:///./src/app/shared/services/recurso.service.ts","webpack:///./src/app/shared/services/sistema.service.ts","webpack:///./src/app/shared/services/tipo-recurso.service.ts","webpack:///./src/app/shared/services/trabajador.service.ts"],"names":[],"mappings":"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","file":"common.js","sourcesContent":["import { HttpClient, HttpHeaders} from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable, of } from 'rxjs';\r\nimport { catchError, map, tap } from 'rxjs/operators';\r\nimport { AccionPermiso } from '../models/accion-permiso';\r\n\r\nconst httpOptions = {\r\n    headers: new HttpHeaders({ 'Content-Type': 'application/json' })\r\n  };\r\n\r\n@Injectable()\r\nexport class AccionPermisoService {\r\n    url = 'https://api.crl.pe/seguridad/api/PermissionActions';\r\n\r\n    constructor(private http: HttpClient) {}\r\n\r\n    get (id: string, busqueda: string): Observable<AccionPermiso[]> {\r\n        return this.http.get<AccionPermiso[]>(this.url + '?id=' + id + '&busqueda=' + busqueda)\r\n            .pipe(\r\n            tap(_ => console.log('OK.Service.Read.')),\r\n            catchError(this.handleError('Error.Service.Read.', []))\r\n            );\r\n    }\r\n\r\n    add(accionPermiso: AccionPermiso): Observable<AccionPermiso> { // Observable<AccionPermiso> es el tipo de lo que devuelve a travez de la API. que puede ser TRUE o FALSE, o un model en JSON\r\n        return this.http.post<AccionPermiso>(this.url, accionPermiso, httpOptions).pipe(\r\n            tap((accionPermiso: AccionPermiso) => console.log('Ok.Service.Insert.')), // Respuesta de la API, puede ser un Json\r\n            catchError(this.handleError('Error.Service.Insert.')));\r\n    }\r\n\r\n    update(accionPermiso: AccionPermiso): Observable<AccionPermiso> { // Observable<AccionPermiso> es el tipo de lo que devuelve a travez de la API. que puede ser TRUE o FALSE, o un model en JSON\r\n        return this.http.put<AccionPermiso>(this.url + '/' + accionPermiso.id, accionPermiso, httpOptions).pipe(\r\n            tap((sistema: AccionPermiso) => console.log('Ok.Service.Update.')), // Respuesta de la API, puede ser un Json\r\n            catchError(this.handleError('Error.Service.Update.')));\r\n    }\r\n\r\n\r\n    private handleError<T> (operation = 'operation', result?: T) {\r\n        return (error: any): Observable<T> => {\r\n            console.log(`${operation} failed_v99: ${error.message}`);\r\n            return of(result as T);\r\n        };\r\n    }\r\n\r\n}\r\n\r\n/* Anotaciones\r\n- Se tratan de dejar las respuesta de los errores de la manera mas gen√©rica para que no arrojen errores y estar abiertas a\r\n    cambios de las respuestas de APIS y no generen inconsistencias\r\n*/\r\n","import { HttpClient, HttpHeaders} from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable, of } from 'rxjs';\r\nimport { catchError, map, tap } from 'rxjs/operators';\r\nimport { Recurso } from '../models/recurso';\r\n\r\nconst httpOptions = {\r\n    headers: new HttpHeaders({ 'Content-Type': 'application/json' })\r\n  };\r\n\r\n@Injectable()\r\nexport class RecursoService {\r\n    \r\n    url: string = 'https://api.crl.pe/seguridad/api/Resources';\r\n    \r\n    constructor(private http: HttpClient) {}\r\n\r\n    get (id:string, busqueda:string): Observable<Recurso[]> {\r\n        return this.http.get<Recurso[]>(this.url + '?id=' + id + '&busqueda='+ busqueda)\r\n            .pipe(\r\n            tap(_ => console.log('OK.Service.Read.')),\r\n            catchError(this.handleError('Error.Service.Read.', []))\r\n            );\r\n    };\r\n\r\n    add(recurso:Recurso): Observable<Recurso>{ // Observable<Recurso> es el tipo de lo que devuelve a travez de la API. que puede ser TRUE o FALSE, o un model en JSON\r\n        return this.http.post<Recurso>(this.url, recurso, httpOptions).pipe(\r\n            tap((recurso:Recurso) => console.log('Ok.Service.Insert.')), // Respuesta de la API, puede ser un Json\r\n            catchError(this.handleError('Error.Service.Insert.')));\r\n    }\r\n\r\n    update(recurso:Recurso):Observable<Recurso>{ // Observable<Recurso> es el tipo de lo que devuelve a travez de la API. que puede ser TRUE o FALSE, o un model en JSON\r\n        return this.http.put<Recurso>(this.url + '/' + recurso.id, recurso, httpOptions).pipe(\r\n            tap((recurso:Recurso) => console.log('Ok.Service.Update.')),// Respuesta de la API, puede ser un Json\r\n            catchError(this.handleError('Error.Service.Update.')));\r\n    }\r\n\r\n    private handleError<T> (operation = 'operation', result?: T){\r\n        return (error: any): Observable<T> => {\r\n            console.log(`${operation} failed_v99: ${error.message}`);\r\n            return of(result as T);\r\n        }\r\n    }\r\n\r\n}","import { HttpClient, HttpHeaders} from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable, of } from 'rxjs';\r\nimport { catchError, map, tap } from 'rxjs/operators';\r\nimport { Sistema } from '../models/sistema';\r\n\r\nconst httpOptions = {\r\n    headers: new HttpHeaders({ 'Content-Type': 'application/json' })\r\n  };\r\n\r\n@Injectable()\r\nexport class SistemaService {\r\n\r\n    url = 'https://api.crl.pe/seguridad/api/SystemApps';\r\n\r\n    constructor(private http: HttpClient) {}\r\n\r\n    get (id: number, busqueda: string): Observable<Sistema[]> {\r\n        return this.http.get<Sistema[]>(this.url + '?id=' + id + '&busqueda=' + busqueda)\r\n            .pipe(\r\n            tap(_ => console.log('OK.Service.Read.')),\r\n            catchError(this.handleError('Error.Service.Read.', []))\r\n            );\r\n    }\r\n\r\n    add(item: Sistema): Observable<Sistema> {\r\n        return this.http.post<Sistema>(this.url, item, httpOptions).pipe(\r\n            tap((item: Sistema) => console.log('Ok.Service.Insert.')), // Respuesta de la API, puede ser un Json\r\n            catchError(this.handleError('Error.Service.Insert.')));\r\n    }\r\n\r\n    update(item: Sistema): Observable<Sistema> {\r\n        return this.http.put<Sistema>(this.url + '/' + item.id, item, httpOptions).pipe(\r\n            tap((item: Sistema) => console.log('Ok.Service.Update.')), // Respuesta de la API, puede ser un Json\r\n            catchError(this.handleError('Error.Service.Update.')));\r\n    }\r\n\r\n    delete(id: number): Observable<Sistema> {\r\n        return this.http.delete<Sistema>(this.url + '/' + id, httpOptions).pipe(\r\n            tap((item: Sistema) => console.log('Ok.Service.Delete.')),\r\n            catchError(this.handleError('Error.Service.Delete.')));\r\n    }\r\n\r\n    private handleError<T> (operation = 'operation', result?: T) {\r\n        return (error: any): Observable<T> => {\r\n            console.log(`${operation} failed_v99: ${error.message}`);\r\n            return of(result as T);\r\n        };\r\n    }\r\n\r\n}\r\n\r\n/* Anotaciones\r\n- Se tratan de dejar las respuesta de los errores de la manera mas gen√©rica para que no arrojen errores y estar abiertas a\r\n    cambios de las respuestas de APIS y no generen inconsistencias\r\n*/\r\n","import { HttpClient, HttpHeaders} from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable, of } from 'rxjs';\r\nimport { catchError, map, tap } from 'rxjs/operators';\r\nimport { TipoRecurso } from '../models/tipo-recurso';\r\n\r\nconst httpOptions = {\r\n    headers: new HttpHeaders({ 'Content-Type': 'application/json' })\r\n  };\r\n\r\n@Injectable()\r\nexport class TipoRecursoService {\r\n    url: string = 'https://api.crl.pe/seguridad/api/TypeResources';\r\n    \r\n    constructor(private http: HttpClient) {}\r\n\r\n    get (id:string, busqueda:string): Observable<TipoRecurso[]> {\r\n        return this.http.get<TipoRecurso[]>(this.url + '?id=' + id + '&busqueda='+ busqueda)\r\n            .pipe(\r\n            tap(_ => console.log('OK.Service.Read.')),\r\n            catchError(this.handleError('Error.Service.Read.', []))\r\n            );\r\n    };\r\n\r\n    add(tipoRecurso:TipoRecurso): Observable<TipoRecurso>{ // Observable<TipoRecurso> es el tipo de lo que devuelve a travez de la API. que puede ser TRUE o FALSE, o un model en JSON\r\n        return this.http.post<TipoRecurso>(this.url, tipoRecurso, httpOptions).pipe(\r\n            tap((tipoRecurso:TipoRecurso) => console.log('Ok.Service.Insert.')), // Respuesta de la API, puede ser un Json\r\n            catchError(this.handleError('Error.Service.Insert.')));\r\n    }\r\n\r\n    update(tipoRecurso:TipoRecurso):Observable<TipoRecurso>{ // Observable<TipoRecurso> es el tipo de lo que devuelve a travez de la API. que puede ser TRUE o FALSE, o un model en JSON\r\n        return this.http.put<TipoRecurso>(this.url + '/' + tipoRecurso.id, tipoRecurso, httpOptions).pipe(\r\n            tap((tipoRecurso:TipoRecurso) => console.log('Ok.Service.Update.')),// Respuesta de la API, puede ser un Json\r\n            catchError(this.handleError('Error.Service.Update.')));\r\n    }\r\n\r\n    private handleError<T> (operation = 'operation', result?: T){\r\n        return (error: any): Observable<T> => {\r\n            console.log(`${operation} failed_v99: ${error.message}`);\r\n            return of(result as T);\r\n        }\r\n    }\r\n\r\n}\r\n\r\n/* Anotaciones  \r\n- Se tratan de dejar las respuesta de los errores de la manera mas gen√©rica para que no arrojen errores y estar abiertas a \r\n    cambios de las respuestas de APIS y no generen inconsistencias\r\n*/","import { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable, of } from 'rxjs';\r\nimport { catchError, map, tap } from 'rxjs/operators';\r\nimport { Trabajador } from '../models/trabajador';\r\n\r\nconst httpOptions = {\r\n    headers: new HttpHeaders({ 'Content-Type': 'application/json' })\r\n};\r\n@Injectable()\r\nexport class TrabajadorService {\r\n\r\n    url: string = 'https://api.crl.pe/seguridad/api/Trabajadores?busqueda=';\r\n    \r\n    constructor(private http: HttpClient) {}\r\n\r\n    get (busqueda:string): Observable<Trabajador[]> {\r\n        return this.http.get<Trabajador[]>(this.url + busqueda)\r\n            .pipe(\r\n            tap(_ => console.log('OK.Service.Read.')),\r\n            catchError(this.handleError('Error.Service.Read.', []))\r\n            );\r\n    };\r\n\r\n    private handleError<T> (operation = 'operation', result?: T){\r\n        return (error: any): Observable<T> => {\r\n            console.log(`${operation} failed_v99: ${error.message}`);\r\n            return of(result as T);\r\n        }\r\n    }\r\n\r\n}"],"sourceRoot":""}